// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  plan          Plan      @default(FREE)
  accounts      Account[]
  sessions      Session[]
  payment       Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Component {
  id            String          @id @default(cuid())
  name          String
  slug          String          @unique
  description   String
  usageGuide    String
  previewIframe String
  previewImage  String
  htmlCode      String?
  cssCode       String?
  jsCode        String?
  status        ComponentStatus
  accessLevel   AccessLevel

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String        @id @default(uuid())
  userId    String        @unique
  paymentId String
  status    PaymentStatus

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  FAILED
  SUCCESS
  PROCESSING
  CANCELLED
}

enum Role {
  USER
  ADMIN
}

enum AccessLevel {
  FREE
  PRO
}

enum Plan {
  FREE
  PAID
}

enum ComponentStatus {
  DRAFT
  PUBLISHED
}
